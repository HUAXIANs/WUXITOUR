package com.example.wuxitour.ui.screens.trip

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.wuxitour.data.model.Trip
// import com.example.wuxitour.data.repository.MockDataRepository // 删除此行
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import com.example.wuxitour.data.repository.TripRepository
import com.example.wuxitour.data.repository.UserRepository
import com.example.wuxitour.data.common.NetworkResult
import com.example.wuxitour.utils.Logger
import dagger.hilt.android.lifecycle.HiltViewModel
import javax.inject.Inject

data class TripUiState(
    val isLoading: Boolean = false,
    val trips: List<Trip> = emptyList(),
    val showCreateDialog: Boolean = false, // 新增：控制创建对话框的显示
    val error: String? = null
)

@HiltViewModel
class TripViewModel @Inject constructor(
    private val tripRepository: TripRepository,
    private val userRepository: UserRepository
) : ViewModel() {
    private val _uiState = MutableStateFlow(TripUiState())
    val uiState: StateFlow<TripUiState> = _uiState.asStateFlow()

    init {
        loadTrips()
    }

    private fun loadTrips() {
        viewModelScope.launch {
            _uiState.update { it.copy(isLoading = true, error = null) }
            userRepository.getUserTrips().collect { result ->
                when (result) {
                    is NetworkResult.Loading<List<Trip>> -> {
                        _uiState.update { it.copy(isLoading = true) }
                    }
                    is NetworkResult.Success<List<Trip>> -> {
                        _uiState.update {
                            it.copy(
                                isLoading = false,
                                trips = result.data,
                                error = null
                            )
                        }
                    }
                    is NetworkResult.Empty<List<Trip>> -> {
                        _uiState.update { it.copy(isLoading = false, trips = emptyList(), error = result.message) }
                        Logger.i("加载行程列表：数据为空 - ${result.message}")
                    }
                    is NetworkResult.Error<List<Trip>> -> {
                        _uiState.update {
                            it.copy(
                                isLoading = false,
                                error = result.message
                            )
                        }
                        Logger.e("加载行程列表失败: ${result.message}")
                    }
                }
            }
        }
    }

    fun deleteTrip(id: String) {
        viewModelScope.launch {
            _uiState.update { it.copy(isLoading = true, error = null) }
            tripRepository.deleteTrip(id).collect {
                when (it) {
                    is NetworkResult.Loading<Boolean> -> {
                        _uiState.update { currentState -> currentState.copy(isLoading = true) }
                    }
                    is NetworkResult.Success<Boolean> -> {
                        _uiState.update { currentState -> currentState.copy(isLoading = false, error = null) }
                        loadTrips() // 删除成功后重新加载列表
                    }
                    is NetworkResult.Empty<Boolean> -> {
                        _uiState.update { currentState -> currentState.copy(isLoading = false, error = it.message) }
                        Logger.i("删除行程：数据为空 - ${it.message}")
                    }
                    is NetworkResult.Error<Boolean> -> {
                        Logger.e("删除行程失败: ${it.message}")
                        _uiState.update { currentState -> currentState.copy(isLoading = false, error = it.message) }
                    }
                }
            }
        }
    }

    // --- 新增的函数 ---
    fun showCreateTripDialog(show: Boolean) {
        _uiState.update { it.copy(showCreateDialog = show) }
    }

    fun createTrip(name: String, description: String) {
        viewModelScope.launch {
            _uiState.update { it.copy(isLoading = true, error = null) }
            val newTrip = Trip(
                id = "", // ID will be generated by backend
                name = name,
                description = description,
                totalDays = 0,
                attractions = emptyList(),
                status = com.example.wuxitour.data.model.TripStatus.PLANNING,
                startDate = System.currentTimeMillis(),
                endDate = System.currentTimeMillis(),
                estimatedCost = 0.0
            )
            tripRepository.createTrip(newTrip).collect {
                when (it) {
                    is NetworkResult.Loading<Trip> -> {
                        _uiState.update { currentState -> currentState.copy(isLoading = true) }
                    }
                    is NetworkResult.Success<Trip> -> {
                        _uiState.update { currentState -> currentState.copy(isLoading = false, error = null) }
                        showCreateTripDialog(false)
                        loadTrips() // 创建成功后重新加载列表
                    }
                    is NetworkResult.Empty<Trip> -> {
                        _uiState.update { currentState -> currentState.copy(isLoading = false, error = it.message) }
                        Logger.i("创建行程：数据为空 - ${it.message}")
                    }
                    is NetworkResult.Error<Trip> -> {
                        Logger.e("创建行程失败: ${it.message}")
                        _uiState.update { currentState -> currentState.copy(isLoading = false, error = it.message) }
                    }
                }
            }
        }
    }
}